{"version":3,"sources":["../src/classes.ts"],"names":[],"mappings":";;;;;;AAIA,SAAS,aAAa,qBAAqB;AAC3C,OAAO,mBAAmB;AAanB,IAAM,eAAN,cAEG,MAAM;AAAA,EAQd,YAAY,MAAc,SAAiB,MAAa;AAAA;AAAA;AAAA;AACtD,QAAI,CAAC,OAAO,UAAU,IAAI,GAAG;AAC3B,YAAM,IAAI,MAAM,4BAA4B;AAAA,IAC9C;AAEA,QAAI,CAAC,WAAW,OAAO,YAAY,UAAU;AAC3C,YAAM,IAAI,MAAM,uCAAuC;AAAA,IACzD;AAEA,QAAI,aAAa,IAAI,GAAG;AAEtB,cAAM,SAAS,EAAE,OAAO,KAAK,MAAM,CAAC;AAGpC,UAAI,CAAC,YAAY,MAAM,OAAO,GAAG;AAC/B,eAAO,OAAO,MAAM,EAAE,OAAO,KAAK,MAAM,CAAC;AAAA,MAC3C;AAAA,IACF,OAAO;AACL,cAAM,OAAO;AAAA,IACf;AAEA,QAAI,SAAS,QAAW;AACtB,WAAK,OAAO;AAAA,IACd;AAEA,SAAK,OAAO;AAAA,EACd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,YAAoC;AAClC,UAAM,aAAqC;AAAA,MACzC,MAAM,KAAK;AAAA,MACX,SAAS,KAAK;AAAA,IAChB;AAEA,QAAI,KAAK,SAAS,QAAW;AAI3B,iBAAW,OAAO,KAAK;AAEvB,UAAI,cAAc,KAAK,IAAI,GAAG;AAC5B,mBAAW,KAAK,QAAQ,eAAe,KAAK,KAAK,KAAK;AAAA,MACxD;AAAA,IACF;AAEA,QAAI,KAAK,OAAO;AACd,iBAAW,QAAQ,KAAK;AAAA,IAC1B;AAEA,WAAO;AAAA,EACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,WAAmB;AACjB,WAAO,cAAc,KAAK,UAAU,GAAG,mBAAmB,CAAC;AAAA,EAC7D;AACF;AAMO,IAAM,wBAAN,cAEG,aAAmB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAS3B,YAAY,MAAc,SAAiB,MAAa;AACtD,QAAI,CAAC,uBAAuB,IAAI,GAAG;AACjC,YAAM,IAAI;AAAA,QACR;AAAA,MACF;AAAA,IACF;AAEA,UAAM,MAAM,SAAS,IAAI;AAAA,EAC3B;AACF;AAQA,SAAS,uBAAuB,MAAuB;AACrD,SAAO,OAAO,UAAU,IAAI,KAAK,QAAQ,OAAQ,QAAQ;AAC3D;AASA,SAAS,kBAAkB,GAAY,OAAyB;AAC9D,MAAI,UAAU,cAAc;AAC1B,WAAO;AAAA,EACT;AAEA,SAAO;AACT","sourcesContent":["import type {\n  Json,\n  JsonRpcError as SerializedJsonRpcError,\n} from '@metamask/utils';\nimport { hasProperty, isPlainObject } from '@metamask/utils';\nimport safeStringify from 'fast-safe-stringify';\n\nimport type { OptionalDataWithOptionalCause } from './utils';\nimport { dataHasCause, serializeCause } from './utils';\n\nexport type { SerializedJsonRpcError };\n\n/**\n * Error subclass implementing JSON RPC 2.0 errors and Ethereum RPC errors\n * per EIP-1474.\n *\n * Permits any integer error code.\n */\nexport class JsonRpcError<\n  Data extends OptionalDataWithOptionalCause,\n> extends Error {\n  // The `cause` definition can be removed when tsconfig lib and/or target have changed to >=es2022\n  public cause?: unknown;\n\n  public code: number;\n\n  public data?: Data;\n\n  constructor(code: number, message: string, data?: Data) {\n    if (!Number.isInteger(code)) {\n      throw new Error('\"code\" must be an integer.');\n    }\n\n    if (!message || typeof message !== 'string') {\n      throw new Error('\"message\" must be a non-empty string.');\n    }\n\n    if (dataHasCause(data)) {\n      // @ts-expect-error - Error class does accept options argument depending on runtime, but types are mapping to oldest supported\n      super(message, { cause: data.cause });\n\n      // Browser backwards-compatibility fallback\n      if (!hasProperty(this, 'cause')) {\n        Object.assign(this, { cause: data.cause });\n      }\n    } else {\n      super(message);\n    }\n\n    if (data !== undefined) {\n      this.data = data;\n    }\n\n    this.code = code;\n  }\n\n  /**\n   * Get the error as JSON-serializable object.\n   *\n   * @returns A plain object with all public class properties.\n   */\n  serialize(): SerializedJsonRpcError {\n    const serialized: SerializedJsonRpcError = {\n      code: this.code,\n      message: this.message,\n    };\n\n    if (this.data !== undefined) {\n      // `this.data` is not guaranteed to be a plain object, but this simplifies\n      // the type guard below. We can safely cast it because we know it's a\n      // JSON-serializable value.\n      serialized.data = this.data as { [key: string]: Json };\n\n      if (isPlainObject(this.data)) {\n        serialized.data.cause = serializeCause(this.data.cause);\n      }\n    }\n\n    if (this.stack) {\n      serialized.stack = this.stack;\n    }\n\n    return serialized;\n  }\n\n  /**\n   * Get a string representation of the serialized error, omitting any circular\n   * references.\n   *\n   * @returns A string representation of the serialized error.\n   */\n  toString(): string {\n    return safeStringify(this.serialize(), stringifyReplacer, 2);\n  }\n}\n\n/**\n * Error subclass implementing Ethereum Provider errors per EIP-1193.\n * Permits integer error codes in the [ 1000 <= 4999 ] range.\n */\nexport class EthereumProviderError<\n  Data extends OptionalDataWithOptionalCause,\n> extends JsonRpcError<Data> {\n  /**\n   * Create an Ethereum Provider JSON-RPC error.\n   *\n   * @param code - The JSON-RPC error code. Must be an integer in the\n   * `1000 <= n <= 4999` range.\n   * @param message - The JSON-RPC error message.\n   * @param data - Optional data to include in the error.\n   */\n  constructor(code: number, message: string, data?: Data) {\n    if (!isValidEthProviderCode(code)) {\n      throw new Error(\n        '\"code\" must be an integer such that: 1000 <= code <= 4999',\n      );\n    }\n\n    super(code, message, data);\n  }\n}\n\n/**\n * Check if the given code is a valid JSON-RPC error code.\n *\n * @param code - The code to check.\n * @returns Whether the code is valid.\n */\nfunction isValidEthProviderCode(code: number): boolean {\n  return Number.isInteger(code) && code >= 1000 && code <= 4999;\n}\n\n/**\n * A JSON replacer function that omits circular references.\n *\n * @param _ - The key being replaced.\n * @param value - The value being replaced.\n * @returns The value to use in place of the original value.\n */\nfunction stringifyReplacer(_: unknown, value: unknown): unknown {\n  if (value === '[Circular]') {\n    return undefined;\n  }\n\n  return value;\n}\n"]}